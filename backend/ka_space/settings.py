"""
Django settings for ka_space project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import pprint
from pathlib import Path
import os

import dj_database_url


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent
TMP_DIR = BASE_DIR.parent / "tmp"
FLAG_DIR = TMP_DIR / "flags"
STATIC_DIR = BASE_DIR / "static"
STATIC_ROOT = BASE_DIR.parent / "static"

# создаем директории
FLAG_DIR.mkdir(parents=True, exist_ok=True)
STATIC_DIR.mkdir(parents=True, exist_ok=True)
STATIC_ROOT.mkdir(parents=True, exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0-tb1ro7_2gla$w%**3t!vy9+w9(kls#=y1pnifw7qob2msx(i"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["ka-space.herokuapp.com", "ka-space-front.herokuapp.com", "127.0.0.1"]
CORS_ALLOWED_ORIGINS = [
    "https://ka-space.herokuapp.com",
    "https://ka-space-front.herokuapp.com",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "ka_space.user",
    "mp",
    "pages",
    "api",
]

AUTH_USER_MODEL = "ka_space_user.User"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ka_space.urls"

TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            TEMPLATE_DIR,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Redirect to home URL after login (Default redirects to /accounts/profile/)
# LOGIN_REDIRECT_URL = '/'

WSGI_APPLICATION = "ka_space.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "ka_db_dev",
        "USER": "developer",
        "PASSWORD": "1",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}
db_url = dj_database_url.config(conn_max_age=600)
if db_url:
    DATABASES["default"] = db_url


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # "rest_framework.authentication.TokenAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    # "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

if db_url:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATIC_URL = "static/"
STATICFILES_DIRS = [STATIC_DIR]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Debug emails
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH = str(TMP_DIR / "emails")  # change this to a proper location

# Celery Broker
BROKER_URL = "redis://127.0.0.1:6379/0"
BROKER_TRANSPORT = "redis"

# Cache time to live is 1 minute.
CACHE_TTL = 60 * 0.5
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": BROKER_URL,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "ka",
    }
}


LOGGING_LEVEL = "DEBUG"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {"level": LOGGING_LEVEL, "handlers": ["console", "logfile"]},
    "formatters": {
        "verbose": {"format": "%(levelname)-8s %(asctime).19s %(name)s\t%(message)s"},
        "simple": {"format": "%(levelname)-8s %(module)s\t%(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "simple"},
        "logfile": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": os.path.join(TMP_DIR, "error.log"),
            "formatter": "verbose",
        },
        "celery": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": os.path.join(TMP_DIR, "celery.log"),
            "formatter": "verbose",
        },
        "api": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(TMP_DIR, "api.log"),
            "formatter": "verbose",
        },
        "null": {
            "class": "logging.NullHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "mp.tasks": {
            "handlers": ["celery", "console"],
            "level": LOGGING_LEVEL,
            "propagate": False,
        },
        "api": {
            "handlers": ["console", "api"],
            "level": LOGGING_LEVEL,
            "propagate": False,
        },
        "": {
            "handlers": ["console", "logfile"],
            "level": LOGGING_LEVEL,
            "propagate": False,
        },
        "httpx": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}
